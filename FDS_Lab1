/*
EXPERIMENT NO.: 1
TITLE : 
In second year computer engineering class, group a students play cricket, group b studentsplay badminton, group c students play football
Write a python program to find the following output:
1)List of students who play both cricket and badminton
2) List of students who play either cricket or badminton but not both
3)List of students who play neither cricket nor badminton
4)Number of students who play cricket and football but not both
*/

# Recieving input from the user
n1 = int(input("How many students play cricket? "))
c = []  # List of students playing cricket
for i in range(n1):
    stud = int(input("Enter their roll.no: "))
    if stud not in c:  # Avoid duplicates
        c.append(stud)

n2 = int(input("How many students play badminton? "))
b = []  # List of students playing badminton
for i in range(n2):
    stud = int(input("Enter their roll.no: "))
    if stud not in b:  # Avoid duplicates
        b.append(stud)

n3 = int(input("How many students play football? "))
f = []  # List of students playing football
for i in range(n3):
    stud = int(input("Enter their roll.no: "))
    if stud not in f:  # Avoid duplicates
        f.append(stud)

# List of students who play both cricket and badminton
def both_c_and_b():
    c_intersection_b = []
    for i in c:
        if i in b:
            c_intersection_b.append(i)
    return c_intersection_b

# List of students who play either cricket or badminton but not both
# Logic: c union b - c intersection
def c_union_b():
    cub = []
    for i in c:
        if i not in cub:
            cub.append(i)
    for j in b:
        if j not in cub:
            cub.append(j)
    return cub

def not_both():
    either_cricket_or_badminton = []
    union = c_union_b()
    intersection = both_c_and_b()
    for i in union:
        if i not in intersection:
            either_cricket_or_badminton.append(i)
    return either_cricket_or_badminton

# Number of students who play neither cricket nor badminton
# Logic: (c union b union f) - (c union b)
def c_union_b_union_f():
    cubuf = c_union_b()[:]
    for i in f:
        if i not in cubuf:
            cubuf.append(i)
    return cubuf

def neither_cricket_nor_badminton():
    union = c_union_b_union_f()
    short_union = c_union_b()
    nCnB = [i for i in union if i not in short_union]
    return len(nCnB)  # Return count of students who play neither cricket nor badminton

# Number of students who play cricket and football but not badminton.
# Logic: c union b union f - b
def not_badminton():
    union = c_union_b_union_f()
    not_b = [i for i in union if i not in b]
    return len(not_b)  # Return count of students who play cricket and football but not badminton

# Main execution
to_print = int(input("Enter which operation you wish to perform:\n1. List of students who play both cricket and badminton\n2. List of students who play either cricket or badminton but not both\n3. Number of students who play neither cricket nor badminton\n4. Number of students who play cricket and football but not badminton.\n"))

# Display the lists of students
print("List of students playing cricket: ", c)
print("List of students playing badminton: ", b)
print("List of students playing football: ", f)

if to_print == 1:
    show = both_c_and_b()
    print("List of students who play both cricket and badminton: ", show)
elif to_print == 2:
    show = not_both()
    print("List of students who play either cricket or badminton but not both: ", show)
elif to_print == 3:
    show = neither_cricket_nor_badminton()
    print("Number of students who play neither cricket nor badminton: ", show)
elif to_print == 4:
    show = not_badminton()
    print("Number of students who play cricket and football but not badminton: ", show)
else:
    print("Invalid choice")
